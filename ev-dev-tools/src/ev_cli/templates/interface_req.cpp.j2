{% from "helper_macros.j2" import print_spdx_line, unfold_result, unfold_arguments %}
{{ print_spdx_line('Apache-2.0') }}

#include <generated/interface/{{ info.interface }}_req.hpp>

#include <everest/generated_module.hpp>

namespace everest::interface::{{ info.interface }} {

//
// subscribe implementations
//
Subscribes::Subscribes(const RequirementContext& ctx) : ctx(ctx) {} 
{% for var in vars %}

std::function<void(void)> Subscribes::subscribe_{{ var.name }}(const std::function<void({% if var.json_type != 'null' %}{{ var.cpp_type }}{% endif %})>& listener) {
    static const auto& variable_type = ctx.module_peer.get_module().
        get_variable_type_for_requirement(ctx.requirement_id, "{{ var.name }}");

    return generated::subscribe(ctx, variable_type, "{{ var.name }}", [listener](const Value& value){
        {% if var.json_type != 'null' %}
        // FIXME (aw): need to do the conversion here should be defined in typed_module_peer
        listener(generated::safe_cast_to_{{ var.typename }}(value));
        {% else %}
        listener();
        {% endif %}
    });
}

{% endfor %}
//
// call implementations
//
Calls::Calls(const RequirementContext& ctx) : ctx(ctx) {}

{% for cmd in cmds %}
{{ unfold_result(cmd.result) }}Calls::call_{{ cmd.name }}{{ unfold_arguments (cmd.args) }} {
    static const auto& command_type = ctx.module_peer.get_module().
        get_command_type_for_requirement(ctx.requirement_id, "{{ cmd.name }}");
    
    {% if cmd.args|length == 0 %}
    Arguments args = nullptr;
    {% else %}
    Arguments args = {
        {% for arg in cmd.args %}
        {"{{ arg.name }}", {{ arg.name }}},
        {% endfor %}
    };
    {% endif %}

    auto result = generated::call(ctx, command_type, "{{ cmd.name }}", args);

    {% if cmd.result %}
    return generated::safe_cast_to_{{ cmd.result.typename }}(result);
    {% endif %}
}

{% endfor %}
//
// requirement constructors
//
BootRequirement::BootRequirement(const RequirementContext& ctx) : Subscribes(ctx),
    module_id(ctx.module_peer.get_module().id) {}

RunRequirement::RunRequirement(const RequirementContext& ctx) : Subscribes(ctx), Calls(ctx),
    module_id(ctx.module_peer.get_module().id) {}

}
