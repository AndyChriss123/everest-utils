{% from "helper_macros.j2" import print_spdx_line, unfold_result, unfold_arguments, publish_var_signature %}
{{ print_spdx_line('Apache-2.0') }}
#ifndef {{ info.hpp_guard }}
#define {{ info.hpp_guard }}

#include <functional>
#include <string>

#include <everest/generated_module_fwd.hpp>

namespace everest::interface::{{ info.interface }} {

extern std::string get_definition();

struct Subscribes{
    Subscribes(const RequirementContext&);
    {% for var in vars %}
    std::function<void(void)> subscribe_{{ var.name }}(const std::function<void({% if var.json_type != 'null' %}{{ var.cpp_type }}{% endif %})>& listener);
    {% endfor %}
private:
    RequirementContext ctx;
};

struct Calls {
    Calls(const RequirementContext&);
    {% for cmd in cmds %}
    {{ unfold_result(cmd.result) }}call_{{ cmd.name }}{{ unfold_arguments(cmd.args) }};
    {% endfor %}

private:
    RequirementContext ctx;
};

struct BootRequirement : public Subscribes {
    BootRequirement(const RequirementContext&);
    std::string module_id;
};

struct RunRequirement : public Subscribes, public Calls {
    RunRequirement(const RequirementContext&);
    std::string module_id;
};
}

#endif // {{ info.hpp_guard }}
