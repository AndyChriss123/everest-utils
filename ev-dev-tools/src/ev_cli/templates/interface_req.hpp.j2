{% from "helper_macros.j2" import print_spdx_line, result_type, cpp_type, var_to_cpp, call_cmd_signature, publish_var_signature %}
{{ print_spdx_line('Apache-2.0') }}
#ifndef {{ info.hpp_guard }}
#define {{ info.hpp_guard }}

#include <everest/utils/interface_defs.hpp>

namespace everest::interface::{{ info.interface }} {

struct Subscribes{
    Subscribes(Everest* ev, const Requirement& req) : _ev(ev), _req(req){};
    {% for var in vars %}
    void subscribe_{{ var.name }}(const std::function<void({% if var.json_type != 'null' %}{{ cpp_type(var) }}{% endif %})>& listener);
    {% endfor %}

private:
    Everest* _ev;
    Requirement _req;
};

struct Calls {
    Calls(Everest* ev, const Requirement& req) : _ev(ev), _req(req){};
    {% for cmd in cmds %}
    {{ call_cmd_signature(cmd) }};
    {% endfor %}

private:
    Everest* _ev;
    Requirement _req;
};

struct BootRequirement : public Subscribes {
    BootRequirement(Everest* ev, const Requirement& req, const std::string& module_id);
    std::string module_id;
};

struct RunRequirement : public Subscribes, public Calls {
    RunRequirement(Everest* ev, const Requirement& req, const std::string& module_id);
    std::string module_id;
};
}

#endif // {{ info.hpp_guard }}
