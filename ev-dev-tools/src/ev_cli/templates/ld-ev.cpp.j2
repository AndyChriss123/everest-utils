{% from "helper_macros.j2" import print_template_info, var_to_cpp, print_spdx_line %}
{{ print_spdx_line('Apache-2.0') }}
{{ print_template_info('4') }}

#include "module.hpp"

#include <everest/utils/module_adapter.hpp>

namespace intf = everest::interface;

{% if configs %}
static module::Configs setup_configs(const everest::ModuleConfigs& module_configs) {
    module::Configs c;

    {% for impl in configs.implementations %}
    {% for item in impl.config %}
    c.implementations.{{ impl.id }}.{{ item.name }} = boost::get<{{ item.cpp_type }}>(module_configs.at("{{ impl.id }}").at("{{ item.name }}"));
    {% endfor %}

    {% endfor %}
    {% for item in configs.module %}
    c.module.{{ item.name }} = boost::get<{{ item.cpp_type }}>(module_configs.at("!module").at("{{ item.name }}"));
    {% endfor %}

    return c;
}

{% endif %}
namespace module {

void load(int argc, char* argv[], ModuleBase& module) {

    auto ma_ctx = everest::instanciate_module(argc, argv);
    
    {% if configs %}
    auto configs = setup_configs(ma_ctx.module_configs);
    {% endif %}

    {% for req in requires %}
    everest::RequirementHelper<intf::{{ req.type }}::BootProvides, intf::{{ req.type }}::RunProvides> r_{{ req.id }}(ma_ctx.ev);
    {% endfor %}

    const auto& cxns = ma_ctx.connections;
    {% for req in requires %}
    for (size_t idx = 0; idx < cxns.at("{{ req.id }}").size(); ++idx) {
        r_{{ req.id }}.add({"{{ req.id }}", idx }, cxns.at("{{ req.id }}")[idx].at("module_id"));
    }

    {% endfor %}
    module::BootRequirements boot_req{
        {% for req in requires %}
        {% if req.is_vector %}
        r_{{ req.id }}.boot_provides,
        {% else %}
        r_{{ req.id }}.boot_provides[0],
        {% endif %}
        {% endfor %}
    };

    BootstrapContext boot_ctx {
        {% if configs %}
        configs,
        {% endif %}
        boot_req,
        ma_ctx.info,
    };

    auto impls = module.mod_init(boot_ctx);
    
    module::Requirements req{
        {% for req in requires %}
        {% if req.is_vector %}
        r_{{ req.id }}.run_provides,
        {% else %}
        r_{{ req.id }}.run_provides[0],
        {% endif %}
        {% endfor %}
    };

    {% if publishing_provides %}
    module::Provides provides {
        {% for impl in publishing_provides %}
        intf::{{ impl.type }}::Provides(ma_ctx.ev, "{{ impl.id }}"),
        {% endfor %}
    };
    {% endif %}

    {% for impl in provides %}
    impls.{{ impl.id }}.do_register(ma_ctx.ev{% if impl.is_publishing %}, &provides.{{ impl.id }}.publish{% endif %});
    {% endfor %}


    Context ctx {
        {% if configs %}
        configs,
        {% endif %}
        req,
        {% if publishing_provides %}
        provides,
        {% endif %}
        ma_ctx.info,
    };

    everest::connect_module(ma_ctx.ev, [&ctx, &module](){
        module.mod_ready(ctx);
    });
}

}
