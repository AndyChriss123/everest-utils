{% from "helper_macros.j2" import print_template_info, insert_block, print_spdx_line %}
{{ print_spdx_line('Apache-2.0') }}
#ifndef {{ info.hpp_guard }}
#define {{ info.hpp_guard }}

#include <everest/generated_module_fwd.hpp>

{% if requires %}
// interface headers for requirements
{% for req in requires %}
#include <generated/interface/{{ req.type }}_req.hpp>
{% endfor %}

{% endif %}
{% if implementations %}
// interface headers for provided implementations
{% for impl in implementations %}
#include <generated/interface/{{ impl.type }}_impl.hpp>
{% endfor %}

{% endif %}
namespace module {

extern std::string get_definition();

{% if configs %}
//
// config related structures
//
{% for impl in configs.implementations %}
struct {{ impl.id }}Config {
    {% for item in impl.config %}
    {{ item.cpp_type }} {{ item.name }};
    {% endfor %}
};

{% if loop.last %}
struct ImplementationConfigs {
    {% for impl in configs.implementations %}
    {{ impl.id }}Config {{ impl.id }};
    {% endfor %}
};

{% endif %}
{% endfor %}
struct ModuleConfig {
    {% for item in configs.module %}
    {{ item.cpp_type }} {{ item.name }};
    {% endfor %}
};

struct Configs {
    {% if configs.implementations %}
    ImplementationConfigs implementation;
    {% endif %}
    {% if configs.module %}
    ModuleConfig module;
    {% endif %}
};
{% endif %}

struct ImplementationList {
    {% for impl in implementations %}
    everest::interface::{{ impl.type }}::Implementation {{ impl.id }};
    {% endfor %}
};

struct RunContext {
    {% if configs %}
    Configs config;
    {% endif %}
    {% for req in requires %}
    {% if req.is_vector %}
    std::vector<everest::interface::{{ req.type }}::RunRequiremnt> req_{{ req.id }};
    {% else %}
    everest::interface::{{ req.type }}::RunRequirement req_{{ req.id }};
    {% endif %}
    {% endfor %}
    {% for impl in implementations %}
    everest::interface::{{ impl.type }}::Publishers impl_{{ impl.id }};
    {% endfor %}
    {% if info.enable_external_mqtt %}
    everest::ExternalMQTT mqtt;
    {% endif %}
    everest::ModuleInfo info;
};

struct BootContext {
    {% if configs %}
    Configs config;
    {% endif %}
    {% for req in requires %}
    {% if req.is_vector %}
    std::vector<everest::interface::{{ req.type }}::BootRequirement> req_{{ req.id }};
    {% else %}
    everest::interface::{{ req.type }}::BootRequirement req_{{ req.id }};
    {% endif %}
    {% endfor %}
    {% if info.enable_external_mqtt %}
    everest::ExternalMQTT mqtt;
    {% endif %}
    everest::ModuleInfo info;
};

using ModuleBase = everest::GeneratedModuleBase<BootContext, ImplementationList, RunContext>;

void load(const char* module_id, ModuleBase&);

}

#endif // {{ info.hpp_guard }}
