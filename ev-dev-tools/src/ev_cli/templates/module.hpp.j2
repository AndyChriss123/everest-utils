{% from "helper_macros.j2" import print_template_info, insert_block, cpp_type, print_spdx_line %}
{{ print_spdx_line('Apache-2.0') }}
#ifndef {{ info.hpp_guard }}
#define {{ info.hpp_guard }}

{% if requires %}
// interface headers for requirements
{% for req in requires %}
#include <generated/interfaces/{{ req.type }}.hpp>
{% endfor %}

{% endif %}
{% if provides %}
// interface headers for provided implementations
{% for impl in provides %}
#include <generated/interfaces/impl/{{ impl.type }}.hpp>
{% endfor %}

{% endif %}
namespace module {

{% if configs %}

// config related structures

{% for impl in configs.implementations %}
struct {{ impl.id }}Config {
    {% for item in impl.config %}
    {{ cpp_type(item) }} {{ item.name }};
    {% endfor %}
};

{% if loop.last %}
struct ImplementationConfigs {
    {% for impl in configs.implementations %}
    {{ impl.id }}Config {{ impl.id }};
    {% endfor %}
}

{% endif %}
{% endfor %}
{% if configs.module %}
struct ModuleConfig {
    {% for item in configs.module %}
    {{ cpp_type(item) }} {{ item.name }};
    {% endfor %}
};

{% endif %}
struct Configs {
    {% if configs.implementations %}
    ImplementationConfigs implementation;
    {% endif %}
    {% if configs.module %}
    ModuleConfig module;
    {% endif %}
};
{% endif %}

{% if requires %}

// requirements

struct BootRequirements {
    {% for req in requires %}
    {% if req.is_vector %}
    std::vector<everest::interface::{{ req.type }}::BootProvides> {{ req.id }};
    {% else %}
    everest::interface::{{ req.type }}::BootProvides {{ req.id }};
    {% endif %}
    {% endfor %}
};

struct Requirements {
    {% for req in requires %}
    {% if req.is_vector %}
    std::vector<everest::interface::{{ req.type }}::RunProvides> {{ req.id }};
    {% else %}
    everest::interface::{{ req.type }}::RunProvides {{ req.id }};
    {% endif %}
    {% endfor %}
};

{% endif %}
{% if publishing_provides %}
struct Provides {
    {% for impl in publishing_provides %}
    everest::interface::{{ impl.type }}::Provides {{ impl.id }};
    {% endfor %}
};

{% endif %}
struct ImplementationList {
    {% for impl in provides %}
    everest::interface::{{ impl.type }}::Implementation {{ impl.id }};
    {% endfor %}
};

struct Context {
    {% if configs %}
    Configs config;
    {% endif %}
    Requirements uses;
    {% if publishing_provides %}
    Provides provides;
    {% endif %}
    everest::ModuleInfo info;
};

struct BootstrapContext {
    {% if configs %}
    Configs config;
    {% endif %}
    BootRequirements uses;
    everest::ModuleInfo info;
};

using ModuleInit = std::function<ImplementationList&(BootstrapContext&)>;
using ModuleReady = std::function<void(Context&)>;

class ModuleBase {
public:
    virtual ImplementationList mod_init(BootstrapContext&) = 0;
    virtual void mod_ready(Context&) = 0;
};

void load(int argc, char* argv[], ModuleBase&);

}

#endif // {{ info.hpp_guard }}
